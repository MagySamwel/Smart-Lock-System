;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void initialize_pins();
;void enter_samples();
;void wait_asterisk();
;void mainPage();
;unsigned int read_lcd();
;unsigned char keypad();
;_Bool match_ID_PC(unsigned int id, unsigned int entered_passward);
;void set_passcode();
;void update_password(unsigned id);
;unsigned int get_passward(unsigned int id);
;void admin_update_password(unsigned int id, unsigned int new_passward);
;char* get_name(unsigned int id);
;_Bool exist(unsigned id);
;int get_id_location(unsigned int id);
;unsigned int check_flags(unsigned char curr_char);
;unsigned int get_nameLength(unsigned char ch);
;void admin_interaction();
;void handle_interrupt(_Bool check_password);
;void EE_Write(unsigned int address, unsigned char data);
;unsigned char EE_Read(unsigned int address);
;unsigned int store(char name[], unsigned int id, unsigned int password, unsigned int location);
;unsigned int store_number(unsigned int number, unsigned int location, _Bool ID_or_PC);
;unsigned int store_name(char name[], unsigned int location);
;unsigned int get_number(unsigned int location);
;char* get_name_fromEEPROM(unsigned int location);
;void error(int number_of_peeps, const char* message);
;unsigned int GetBit(unsigned int num, unsigned int idx);
;unsigned int SetBit1(unsigned int num, unsigned int idx);
;unsigned int SetBit0(unsigned int num, unsigned int idx);
;void open_door();
;void close_door();
;interrupt[2] void admin_INT0(void);
;interrupt[3] void setPC_INT1(void);
;void main(void)
; 0000 006A {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 006B initialize_pins();      // initialize pins (inputs and outputs)
;PCODE: $0000000E VOL: 0
; 0000 006C enter_samples();        // add samples to be tested
;PCODE: $0000000F VOL: 0
; 0000 006D wait_asterisk();         // wait * to start the system
;PCODE: $00000010 VOL: 0
; 0000 006E }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;void initialize_pins()
; 0000 0072 {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0073 lcd_init(16);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0074 DDRC = 0b00000111;              // keypad port (3 outputs , 4 inputs , 1 unused)
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0075 PORTC = 0b11111000;             // enable pull up resistance for input pins
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0076 
; 0000 0077 DDRB = 0b0000011;               //motor pins (set them to be output)
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0078 PORTB.0 = 1; PORTB.1 = 1;       // intialize the door to make it not moving
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0079 
; 0000 007A 
; 0000 007B DDRD.3 = 0;                     // set pc button pin (set the pin to be input)
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 007C PORTD.3 = 1;                    //Pullup
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 007D DDRD.2 = 0;                     //admin push-pull button pin
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 007E PORTD.2 = 1;                    //Pullup
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 007F 
; 0000 0080 DDRD.5 = 1;                     // activate sounder bit  (set it to be output)
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0081 
; 0000 0082 SREG.7 = 1;                     // or #asm("sei")  => Enable global interrupt
;PCODE: $0000002C VOL: 0
; 0000 0083 GICR |= (1 << 6);               // Enable EXT_INT0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0084 MCUCR |= (1 << 1);              // Falling edge EXT_INT0  MCUCR.1=1
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0085 MCUCR &= ~(1 << 0);             // MCUCR.0=0;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0086 
; 0000 0087 GICR |= (1 << 7);               //  Enable EXT_INT1
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0088 MCUCR |= (1 << 3);              //  Falling edge EXT_INT1  MCUCR.3=1
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0089 MCUCR &= ~(1 << 2);             //  MCUCR.2=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 008A }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;void enter_samples()
; 0000 008D {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 008E 
; 0000 008F char names[][20] = { "Prof", "Ahmed", "Amr" ,"Adel" ,"Omar" , "MAX_ID" };
; 0000 0090 unsigned int ids[] = { 111, 126, 128 , 130 , 132 , 999 };
; 0000 0091 unsigned int passwords[] = { 203, 129, 325 , 426 ,79 , 999};
; 0000 0092 
; 0000 0093 unsigned int size = sizeof(names) / sizeof(names[0]);
; 0000 0094 int i = 0;
; 0000 0095 for (i = 0; i < size; i++)
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;	names -> Y+28
;	ids -> Y+16
;	passwords -> Y+4
;	size -> R16,R17
;	i -> R18,R19
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0096 {
; 0000 0097 curr_location = store(names[i], ids[i], passwords[i], curr_location);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0098 }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0099 
; 0000 009A }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;void wait_asterisk()
; 0000 009D {
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 009E if (!first_run)  // check it it's the first time to run the programe
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 009F {
; 0000 00A0 delay_ms(1000);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00A1 lcd_clear();
;PCODE: $0000007A VOL: 0
; 0000 00A2 }
; 0000 00A3 first_run = false;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00A4 lcd_printf("Press *");  strcpy(curr_lcd, "Press *");
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00A5 while (1)
;PCODE: $00000089 VOL: 0
; 0000 00A6 {
; 0000 00A7 c = keypad();
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00A8 
; 0000 00A9 if (c == '*')
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00AA {
; 0000 00AB mainPage();
;PCODE: $0000008F VOL: 0
; 0000 00AC }
; 0000 00AD else
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00AE {
; 0000 00AF error(1, "Please press *");
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00B0 }
;PCODE: $00000097 VOL: 0
; 0000 00B1 
; 0000 00B2 }
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00B3 }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0

	.DSEG
_0x17:
	.BYTE 0x17
;void mainPage()
; 0000 00B7 {

	.CSEG
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00B8 unsigned int password = 0, id = 0;
; 0000 00B9 char* name = "";
; 0000 00BA lcd_clear();
;PCODE: $0000009E VOL: 0
;	password -> R16,R17
;	id -> R18,R19
;	*name -> R20,R21
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00BB lcd_printf("Enter your ID");
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00BC lcd_gotoxy(0, 1);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00BD strcpy(curr_lcd, "Enter your ID");  // save the current state of the lcd
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00BE 
; 0000 00BF id = read_lcd();
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00C0 
; 0000 00C1 if (exist(id))
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00C2 {
; 0000 00C3 lcd_clear();
;PCODE: $000000BD VOL: 0
; 0000 00C4 enter_password=true;   // enable the password mode
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00C5 curr_num =-1;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00C6 lcd_printf("Enter your PC:");
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00C7 strcpy(curr_lcd, "Enter your PC:");
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00C8 lcd_gotoxy(0, 1);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00C9 
; 0000 00CA password = read_lcd();
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00CB if (match_ID_PC(id, password))
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00CC {
; 0000 00CD name = get_name(id);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00CE lcd_clear();
;PCODE: $000000DC VOL: 0
; 0000 00CF lcd_printf("Welcome, %s", name);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00D0 open_door();
;PCODE: $000000E7 VOL: 0
; 0000 00D1 close_door();
;PCODE: $000000E8 VOL: 0
; 0000 00D2 }
; 0000 00D3 else
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00D4 {
; 0000 00D5 error(1, "Sorry, wrong PC");
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00D6 }
;PCODE: $000000F0 VOL: 0
; 0000 00D7 }
; 0000 00D8 else
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00D9 {
; 0000 00DA error(2, "Wrong ID");
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00DB }
;PCODE: $000000F8 VOL: 0
; 0000 00DC wait_asterisk();
;PCODE: $000000F9 VOL: 0
; 0000 00DD }
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0

	.DSEG
_0x1D:
	.BYTE 0x37
;unsigned int read_lcd()
; 0000 00E1 {

	.CSEG
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00E2 unsigned int num = 0, curr_digit = 0, three_digit = 0, col = 0;
; 0000 00E3 
; 0000 00E4 c = ' ';
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;	num -> R16,R17
;	curr_digit -> R18,R19
;	three_digit -> R20,R21
;	col -> Y+6
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00E5 while (three_digit < 3)
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00E6 {
; 0000 00E7 c = keypad();
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00E8 
; 0000 00E9 if (c == '*' || (c == '#' && three_digit == 0))
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00EA {
; 0000 00EB error(1, "");
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00EC }
; 0000 00ED else if (c == '#')  // use # to remove the last digit
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00EE {
; 0000 00EF lcd_gotoxy(--col, 1);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00F0 lcd_printf("%c", '');
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00F1 three_digit--;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00F2 num/=10;              // remove the last digit
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00F3 if(!run_interrupt)   // check if we are in an interrupt
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00F4 curr_num = num; // save a copy of the number to use it after finishing the interrupt
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00F5 }
;PCODE: $00000143 VOL: 0
; 0000 00F6 else
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00F7 {
; 0000 00F8 three_digit++;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00F9 lcd_gotoxy(col++, 1);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00FA if(enter_password==true)  // we are in the password mode
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00FB {
; 0000 00FC lcd_printf("*");
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00FD }
; 0000 00FE else
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00FF {
; 0000 0100 lcd_printf("%c", c);
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0101 }
;PCODE: $00000165 VOL: 0
; 0000 0102 
; 0000 0103 curr_digit = c - '0';
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0104 num *= 10;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0105 num += curr_digit;       // add new digit to the number
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0106 if(!run_interrupt)
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0107 curr_num = num;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0108 }
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0109 }
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 010A enter_password=false;    // disable password mode
;PCODE: $00000178 VOL: 0
; 0000 010B delay_ms(700);
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 010C lcd_clear();
;PCODE: $0000017B VOL: 0
; 0000 010D return num;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 010E }
;PCODE: $00000180 VOL: 0

	.DSEG
_0x2A:
	.BYTE 0x1
;unsigned char keypad()
; 0000 0111 {

	.CSEG
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 0112 while (1)
;PCODE: $00000183 VOL: 0
; 0000 0113 {
; 0000 0114 PORTC.0 = 0; PORTC.1 = 1; PORTC.2 = 1;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0115 //Only C1 is activated    (first column)
; 0000 0116 switch (PINC)
;PCODE: $0000018A VOL: 0
; 0000 0117 {
; 0000 0118 case 0b11110110:       // first row is activated (be set with 0)  (col:1 , row 1)
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0119 while (PINC.3 == 0);
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 011A return '1';
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 011B break;
;PCODE: $00000195 VOL: 0
; 0000 011C 
; 0000 011D case 0b11101110:       // second row is activated (be set with 0)  (col:1 , row 2)
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 011E while (PINC.4 == 0);
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 011F return '4';
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0120 break;
;PCODE: $000001A1 VOL: 0
; 0000 0121 
; 0000 0122 case 0b11011110:       // third row is activated (be set with 0)   (col:1 , row 3)
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 0123 while (PINC.5 == 0);
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0124 return '7';
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0125 break;
;PCODE: $000001AD VOL: 0
; 0000 0126 
; 0000 0127 case 0b10111110:
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0128 while (PINC.6 == 0);
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0129 return '*';
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 012A break;
;PCODE: $000001B9 VOL: 0
; 0000 012B 
; 0000 012C }
;PCODE: $000001BA VOL: 0
; 0000 012D 
; 0000 012E 
; 0000 012F PORTC.0 = 1; PORTC.1 = 0; PORTC.2 = 1;
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 0130 //Only C2 is activated       (second column)
; 0000 0131 switch (PINC)
;PCODE: $000001C1 VOL: 0
; 0000 0132 {
; 0000 0133 case 0b11110101:
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0134 while (PINC.3 == 0);
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 0135 return '2';
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 0136 break;
;PCODE: $000001CC VOL: 0
; 0000 0137 
; 0000 0138 case 0b11101101:
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0139 while (PINC.4 == 0);
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 013A return '5';
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 013B break;
;PCODE: $000001D8 VOL: 0
; 0000 013C 
; 0000 013D case 0b11011101:
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 013E while (PINC.5 == 0);
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 013F return '8';
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 0140 break;
;PCODE: $000001E4 VOL: 0
; 0000 0141 
; 0000 0142 case 0b10111101:
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 0143 while (PINC.6 == 0);
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0144 return '0';
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 0145 break;
;PCODE: $000001F0 VOL: 0
; 0000 0146 
; 0000 0147 }
;PCODE: $000001F1 VOL: 0
; 0000 0148 
; 0000 0149 
; 0000 014A PORTC.0 = 1; PORTC.1 = 1; PORTC.2 = 0;
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 014B //Only C3 is activated       (third column)
; 0000 014C switch (PINC)
;PCODE: $000001F8 VOL: 0
; 0000 014D {
; 0000 014E case 0b11110011:
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 014F while (PINC.3 == 0);
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0150 return '3';
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0151 break;
;PCODE: $00000203 VOL: 0
; 0000 0152 
; 0000 0153 case 0b11101011:
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0154 while (PINC.4 == 0);
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0155 return '6';
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0156 break;
;PCODE: $0000020F VOL: 0
; 0000 0157 
; 0000 0158 case 0b11011011:
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0159 while (PINC.5 == 0);
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 015A return '9';
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 015B break;
;PCODE: $0000021B VOL: 0
; 0000 015C 
; 0000 015D case 0b10111011:
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 015E while (PINC.6 == 0);
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 015F return '#';
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 0160 break;
;PCODE: $00000227 VOL: 0
; 0000 0161 
; 0000 0162 }
;PCODE: $00000228 VOL: 0
; 0000 0163 
; 0000 0164 }
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 0165 }
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;_Bool match_ID_PC(unsigned int id, unsigned int entered_passward)
; 0000 0169 {
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 016A unsigned int id_passward = 0;
; 0000 016B id_passward = get_passward(id);
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;	id -> R20,R21
;	entered_passward -> R18,R19
;	id_passward -> R16,R17
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 016C return(id_passward == entered_passward);
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 016D }
;PCODE: $0000023E VOL: 0
;void set_passcode()
; 0000 0171 {
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 0172 unsigned int old_password = 0, id = 0;
; 0000 0173 
; 0000 0174 lcd_clear();
;PCODE: $00000241 VOL: 0
;	old_password -> R16,R17
;	id -> R18,R19
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 0175 lcd_puts("Enter your ID");
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 0176 lcd_gotoxy(0, 1);
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 0177 id = read_lcd();
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 0178 if (exist(id))
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 0179 {   enter_password=true;
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 017A lcd_puts("Enter old PC :");
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 017B lcd_gotoxy(0, 1);
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 017C old_password = read_lcd();
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 017D if (match_ID_PC(id, old_password))
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 017E {
; 0000 017F lcd_clear();
;PCODE: $00000264 VOL: 0
; 0000 0180 enter_password=true;
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 0181 lcd_puts("Enter new PC :");
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 0182 lcd_gotoxy(0, 1);
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 0183 update_password(id);
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 0184 }
; 0000 0185 else
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 0186 {
; 0000 0187 lcd_clear();
;PCODE: $00000272 VOL: 0
; 0000 0188 error(2, "Contact Admin");
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 0189 }
;PCODE: $00000278 VOL: 0
; 0000 018A }
; 0000 018B else
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 018C {
; 0000 018D lcd_clear();
;PCODE: $0000027B VOL: 0
; 0000 018E error(2, "Contact Admin");
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 018F }
;PCODE: $00000281 VOL: 0
; 0000 0190 
; 0000 0191 
; 0000 0192 }
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0

	.DSEG
_0x80:
	.BYTE 0x48
;void update_password(unsigned int id)
; 0000 0196 {

	.CSEG
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 0197 unsigned int new_passward = 0, reenter_new_password = 0, idx = 0;
; 0000 0198 
; 0000 0199 new_passward = read_lcd();
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;	id -> Y+6
;	new_passward -> R16,R17
;	reenter_new_password -> R18,R19
;	idx -> R20,R21
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 019A lcd_clear();
;PCODE: $00000292 VOL: 0
; 0000 019B enter_password=true;
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 019C curr_num =-1;
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 019D lcd_puts("Re-enter new PC");
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 019E lcd_gotoxy(0, 1);
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 019F reenter_new_password = read_lcd();
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 01A0 if (new_passward != reenter_new_password) error(2, "Contact Admin");
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 01A1 else
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 01A2 {
; 0000 01A3 idx = get_id_location(id);
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 01A4 idx += 2;   // skip id address lines
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 01A5 
; 0000 01A6 // remove old passsward
; 0000 01A7 EE_Write(idx++, '0'); EE_Write(idx++, '0');
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 01A8 
; 0000 01A9 //add the new passward
; 0000 01AA idx -= 2;                              // return to the number of the first address that the passward can be stored in
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0000 01AB 
; 0000 01AC store_number(new_passward, idx, 1);  // store the new password
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 01AD 
; 0000 01AE lcd_clear();
;PCODE: $000002C1 VOL: 0
; 0000 01AF lcd_puts("New PC stored");
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 01B0 }
;PCODE: $000002C5 VOL: 0
; 0000 01B1 }
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0

	.DSEG
_0x85:
	.BYTE 0x2C
;unsigned int get_passward(unsigned int id)
; 0000 01B5 {

	.CSEG
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 01B6 unsigned int idx = 0, number = 0;
; 0000 01B7 idx = get_id_location(id);
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;	id -> R20,R21
;	idx -> R16,R17
;	number -> R18,R19
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 01B8 
; 0000 01B9 idx += 2;              // skip id address lines
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 01BA 
; 0000 01BB // get the password
; 0000 01BC number = get_number(idx);
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 01BD return number;
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 01BE 
; 0000 01BF }
;PCODE: $000002DE VOL: 0
;void admin_update_password(unsigned int id, unsigned int new_passward)
; 0000 01C3 {
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 01C4 unsigned int idx = 0;
; 0000 01C5 idx = get_id_location(id);
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;	id -> R20,R21
;	new_passward -> R18,R19
;	idx -> R16,R17
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 01C6 idx += 2;   // skip id address lines
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 01C7 
; 0000 01C8 // remove old passsward
; 0000 01C9 EE_Write(idx++, '0'); EE_Write(idx++, '0');
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0000 01CA 
; 0000 01CB //add the new passward
; 0000 01CC idx -= 2;                               // return to the number of the first address that the passward can be stored in
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 01CD store_number(new_passward, idx, 1);   // store the new password
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 01CE 
; 0000 01CF lcd_clear();
;PCODE: $000002FE VOL: 0
; 0000 01D0 lcd_puts("PC is stored");
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
; 0000 01D1 }
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0

	.DSEG
_0x88:
	.BYTE 0xD
;char* get_name(unsigned int id)
; 0000 01D5 {

	.CSEG
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0000 01D6 unsigned int idx = 0;
; 0000 01D7 char* name;
; 0000 01D8 
; 0000 01D9 idx = get_id_location(id);
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;	id -> R20,R21
;	idx -> R16,R17
;	*name -> R18,R19
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 01DA idx += 2; // skip the id address lines
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0000 01DB idx += 2; // skip the password address lines
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 01DC 
; 0000 01DD // get the name
; 0000 01DE name = get_name_fromEEPROM(idx);
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 0000 01DF 
; 0000 01E0 
; 0000 01E1 return name;
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 01E2 
; 0000 01E3 }
;PCODE: $0000031A VOL: 0
;_Bool exist(unsigned int id)
; 0000 01E7 {
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 01E8 if (get_id_location(id) == -1) return 0;
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;	id -> R16,R17
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0000 01E9 return 1;
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0000 01EA }
;PCODE: $0000032B VOL: 0
;int get_id_location(unsigned int id)
; 0000 01EE {
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
; 0000 01EF unsigned int i = 0, number = 0, flag = 0, length;
; 0000 01F0 unsigned char ch;
; 0000 01F1 for (i = 0; i < curr_location; i++)
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;	id -> Y+9
;	i -> R16,R17
;	number -> R18,R19
;	flag -> R20,R21
;	length -> Y+7
;	ch -> Y+6
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0000 01F2 {
; 0000 01F3 ch = EE_Read(i);
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 01F4 flag = check_flags(ch);
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0000 01F5 if (flag == 0)  // ID
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0000 01F6 {
; 0000 01F7 number = get_number(i);
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
; 0000 01F8 if (number == id) return i;
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 01F9 i++;    // skip the second byte
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0000 01FA 
; 0000 01FB }
; 0000 01FC else if (flag == 1) // PC
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
; 0000 01FD {
; 0000 01FE i++; // skip PC bytes
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
; 0000 01FF }
; 0000 0200 else if (flag == 2)
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0000 0201 {
; 0000 0202 length = get_nameLength(ch);
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 0000 0203 i += length;   // skip the name
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0000 0204 }
; 0000 0205 }
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0000 0206 return -1;
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0000 0207 }
;PCODE: $00000373 VOL: 0
;unsigned int check_flags(unsigned char curr_char) {
; 0000 020A unsigned int check_flags(unsigned char curr_char) {
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
; 0000 020B // Get the values of the last two bits (6,7)
; 0000 020C int bit6 = (curr_char >> 6) & 1;
; 0000 020D int bit7 = (curr_char >> 7) & 1;
; 0000 020E 
; 0000 020F if (bit7 == 1 && bit6 == 0) {
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;	curr_char -> Y+4
;	bit6 -> R16,R17
;	bit7 -> R18,R19
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
; 0000 0210 return 1;    // Check PC (10)
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
; 0000 0211 }
; 0000 0212 else if (bit7 == 0 && bit6 == 1) {
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
; 0000 0213 return 0;   // Check ID (01)
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
; 0000 0214 }
; 0000 0215 else if (bit7 == 1 && bit6 == 1) {
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
; 0000 0216 return 2;   // Check name (11)
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 0217 }
; 0000 0218 
; 0000 0219 // error
; 0000 021A return 3;
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
; 0000 021B }
;PCODE: $000003B5 VOL: 0
;unsigned int get_nameLength(unsigned char ch)
; 0000 021F {
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
; 0000 0220 unsigned length = 0;
; 0000 0221 length = ch;
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;	ch -> R19
;	length -> R16,R17
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
; 0000 0222 // disable flag
; 0000 0223 length = SetBit0(length, 6);
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0000 0224 length = SetBit0(length, 7);
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
; 0000 0225 return length;
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
; 0000 0226 }
;PCODE: $000003CD VOL: 0
;void admin_interaction()
; 0000 022A {
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0000 022B unsigned int AdminPc = 0, StudentID = 0, StudentPC = 0;
; 0000 022C 
; 0000 022D lcd_clear();
;PCODE: $000003D0 VOL: 0
;	AdminPc -> R16,R17
;	StudentID -> R18,R19
;	StudentPC -> R20,R21
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
; 0000 022E enter_password = true;
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
; 0000 022F lcd_printf("Enter Admin PC");
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
; 0000 0230 lcd_gotoxy(0, 1);
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
; 0000 0231 AdminPc = read_lcd();
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0000 0232 if (match_ID_PC(111, AdminPc))
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
; 0000 0233 {
; 0000 0234 lcd_clear();
;PCODE: $000003ED VOL: 0
; 0000 0235 lcd_puts("Enter Student ID");
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
; 0000 0236 lcd_gotoxy(0, 1);
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
; 0000 0237 StudentID = read_lcd();
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
; 0000 0238 if (exist(StudentID))
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
; 0000 0239 {
; 0000 023A lcd_clear();
;PCODE: $000003FB VOL: 0
; 0000 023B enter_password = true;
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
; 0000 023C lcd_puts("Enter new PC");
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
; 0000 023D lcd_gotoxy(0, 1);
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0000 023E StudentPC = read_lcd();
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0000 023F admin_update_password(StudentID, StudentPC);
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
; 0000 0240 }
; 0000 0241 else
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
; 0000 0242 {
; 0000 0243 lcd_clear();
;PCODE: $0000040C VOL: 0
; 0000 0244 error(1, "Contact Admin");
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
; 0000 0245 }
;PCODE: $00000412 VOL: 0
; 0000 0246 }
; 0000 0247 else
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
; 0000 0248 {
; 0000 0249 lcd_clear();
;PCODE: $00000415 VOL: 0
; 0000 024A error(2, "Contact Admin");
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
; 0000 024B }
;PCODE: $0000041B VOL: 0
; 0000 024C 
; 0000 024D }
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0

	.DSEG
_0x9F:
	.BYTE 0x3A
;void EE_Write(unsigned int address, unsigned char data)
; 0000 0254 {

	.CSEG
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
; 0000 0255 while (EECR.1 == 1);    //Wait till EEPROM is ready
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;	address -> R18,R19
;	data -> R17
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
; 0000 0256 EEAR = address;        //Prepare the address you want to read from
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
; 0000 0257 EEDR = data;           //Prepare the data you want to write in the address above
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
; 0000 0258 EECR.2 = 1;            //Master write enable
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
; 0000 0259 EECR.1 = 1;            //Write Enable
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
; 0000 025A }
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;unsigned char EE_Read(unsigned int address)
; 0000 025E {
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
; 0000 025F while (EECR.1 == 1);    //Wait till EEPROM is ready
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;	address -> R16,R17
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 0000 0260 EEAR = address;        //Prepare the address you want to read from
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
; 0000 0261 
; 0000 0262 EECR.0 = 1;            //Execute read command
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
; 0000 0263 
; 0000 0264 return EEDR;
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
; 0000 0265 
; 0000 0266 }
;PCODE: $0000044A VOL: 0
;unsigned int store(char name[], unsigned int id, unsigned int password, unsigned int location)
; 0000 026A {
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
; 0000 026B 
; 0000 026C // Store Id
; 0000 026D location = store_number(id, location, 0);
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;	name -> Y+10
;	id -> R20,R21
;	password -> R18,R19
;	location -> R16,R17
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
; 0000 026E 
; 0000 026F // Store Password
; 0000 0270 location = store_number(password, location, 1);
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
; 0000 0271 
; 0000 0272 // Store Name
; 0000 0273 location = store_name(name, location);
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
; 0000 0274 
; 0000 0275 return location;
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
; 0000 0276 }
;PCODE: $00000466 VOL: 0
;unsigned int store_number(unsigned int number, unsigned int location, _Bool ID_or_PC)
; 0000 027A {
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
; 0000 027B unsigned char idByte1, idByte2;
; 0000 027C //get the last two bits of the number (8,9) .. and shift them to be bit (0,1) at the first byte
; 0000 027D idByte1 = ((number & 0b001100000000) >> 8);
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;	number -> Y+8
;	location -> R20,R21
;	ID_or_PC -> R19
;	idByte1 -> R17
;	idByte2 -> R16
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
; 0000 027E 
; 0000 027F if (ID_or_PC) idByte1 = 0b10000000 | idByte1;     // enable PC flag(10)
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
; 0000 0280 else idByte1 = 0b01000000 | idByte1;             // enable id flag (01)
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
; 0000 0281 
; 0000 0282 
; 0000 0283 // get the first 8 bits(0 > 7) from id to store them at byte2
; 0000 0284 idByte2 = number & 0b11111111;
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
; 0000 0285 
; 0000 0286 //store the number in EEPROM
; 0000 0287 EE_Write(location++, idByte1);
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
; 0000 0288 EE_Write(location++, idByte2);
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
; 0000 0289 
; 0000 028A // we use two address lines of the EEPROM
; 0000 028B return location;
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
; 0000 028C }
;PCODE: $0000048D VOL: 0
;unsigned int store_name(char name[], unsigned int location)
; 0000 0290 {
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
; 0000 0291 unsigned int length = 0, i = 0;
; 0000 0292 unsigned char name_byte;
; 0000 0293 
; 0000 0294 // get the length of the name
; 0000 0295 length = 0;
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;	name -> Y+8
;	location -> Y+6
;	length -> R16,R17
;	i -> R18,R19
;	name_byte -> R21
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
; 0000 0296 for (length = 0; name[length] != '\0'; length++) {}
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
; 0000 0297 
; 0000 0298 // prepare the byte that indicates the name info
; 0000 0299 name_byte = length;                     // use the first 6 bits of tell use the length of the name
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
; 0000 029A 
; 0000 029B name_byte = 0b11000000 | name_byte;      // enable name flag (11)
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
; 0000 029C 
; 0000 029D //store the name_byte before the actual name in EEPROM
; 0000 029E EE_Write(location++, name_byte);
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
; 0000 029F 
; 0000 02A0 // store the name in EEPROM
; 0000 02A1 i = 0;
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 02A2 for (i = 0; i < length; i++) EE_Write(location++, name[i]);
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
; 0000 02A4 return location;
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
; 0000 02A5 }
;PCODE: $000004D0 VOL: 0
;unsigned get_number(unsigned int location)
; 0000 02A9 {
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
; 0000 02AA unsigned int number = 0, first_byte;
; 0000 02AB 
; 0000 02AC // get the second byte value first
; 0000 02AD number = EE_Read(location + 1);
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;	location -> R20,R21
;	number -> R16,R17
;	first_byte -> R18,R19
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
; 0000 02AE 
; 0000 02AF // disable the last two bits of the first byte  (flags)
; 0000 02B0 first_byte = EE_Read(location);
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
; 0000 02B1 first_byte = SetBit0(first_byte, 6);
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
; 0000 02B2 first_byte = SetBit0(first_byte, 7);
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
; 0000 02B3 
; 0000 02B4 
; 0000 02B5 //make the first two bits of the second byte equal to bits number (8,9) of number
; 0000 02B6 if (GetBit(first_byte, 0)) number = SetBit1(number, 8);
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
; 0000 02B7 if (GetBit(first_byte, 1)) number = SetBit1(number, 9);
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
; 0000 02B8 
; 0000 02B9 
; 0000 02BA return number;
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
; 0000 02BB }
;PCODE: $00000506 VOL: 0
;char* get_name_fromEEPROM(unsigned int location)
; 0000 02BF {
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
; 0000 02C0 unsigned int index = 0, length = 0;
; 0000 02C1 static char personName[17 + 1];
; 0000 02C2 
; 0000 02C3 // get the length of the name and disable the 6,7 bits (flags)
; 0000 02C4 length = EE_Read(location++);
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;	location -> R20,R21
;	index -> R16,R17
;	length -> R18,R19
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
; 0000 02C5 length = SetBit0(length, 6);
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
; 0000 02C6 length = SetBit0(length, 7);
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
; 0000 02C7 
; 0000 02C8 
; 0000 02C9 // get the name from EEPROM
; 0000 02CA while (length--)
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
; 0000 02CB {
; 0000 02CC personName[index++] = EE_Read(location++);
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
; 0000 02CD }
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
; 0000 02CE 
; 0000 02CF 
; 0000 02D0 return personName;
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
; 0000 02D1 }
;PCODE: $00000536 VOL: 0
;void error(int number_of_peeps, const char* message) {
; 0000 02D4 void error(int number_of_peeps, const char* message) {
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
; 0000 02D5 while (number_of_peeps) {
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;	number_of_peeps -> R18,R19
;	*message -> R16,R17
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
; 0000 02D6 int i;
; 0000 02D7 for (i = 0; i < 25; i++) {
;PCODE: $00000540 VOL: 0
;	i -> Y+0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
; 0000 02D8 PORTD.5 = 1;
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
; 0000 02D9 delay_ms(2);
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
; 0000 02DA PORTD.5 = 0;
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
; 0000 02DB delay_ms(2);
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
; 0000 02DC }
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
; 0000 02DD delay_ms(100);
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
; 0000 02DE number_of_peeps--;
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
; 0000 02DF }
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
; 0000 02E0 if (strlen(message) != 0)
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
; 0000 02E1 {
; 0000 02E2 lcd_clear();
;PCODE: $00000567 VOL: 0
; 0000 02E3 lcd_printf("%s", message);
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
; 0000 02E4 }
; 0000 02E5 
; 0000 02E6 }
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;void open_door()
; 0000 02EC {
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
; 0000 02ED PORTB.0 = 1;
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
; 0000 02EE PORTB.1 = 0;
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
; 0000 02EF delay_ms(1000);
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
; 0000 02F0 PORTB.1 = 1;
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
; 0000 02F1 }
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;void close_door()
; 0000 02F5 {
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
; 0000 02F6 PORTB.0 = 0;
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
; 0000 02F7 PORTB.1 = 1;
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
; 0000 02F8 delay_ms(1000);
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
; 0000 02F9 PORTB.0 = 1;
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
; 0000 02FA }
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;unsigned int GetBit(unsigned int num, unsigned int idx) {
; 0000 02FE unsigned int GetBit(unsigned int num, unsigned int idx) {
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
; 0000 02FF return (num >> idx) & 1;
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;	num -> R18,R19
;	idx -> R16,R17
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
; 0000 0300 }
;PCODE: $0000059C VOL: 0
;unsigned int SetBit1(unsigned int num, unsigned int idx) {
; 0000 0302 unsigned int SetBit1(unsigned int num, unsigned int idx) {
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
; 0000 0303 return num | (1 << idx);
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;	num -> R18,R19
;	idx -> R16,R17
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
; 0000 0304 }
;PCODE: $000005AA VOL: 0
;unsigned int SetBit0(unsigned num, unsigned int idx) {
; 0000 0306 unsigned int SetBit0(unsigned num, unsigned int idx) {
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
; 0000 0307 return num & ~(1 << idx);
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
;	num -> R18,R19
;	idx -> R16,R17
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
; 0000 0308 }
;PCODE: $000005B9 VOL: 0
;void handle_interrupt(_Bool check_password)
; 0000 030D {
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
; 0000 030E delay_ms(1000);
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;	check_password -> R17
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
; 0000 030F lcd_clear();
;PCODE: $000005C0 VOL: 0
; 0000 0310 lcd_printf("%s", curr_lcd);
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
; 0000 0311 if(curr_num != -1)   // this means that there was a number on the lcd before ther interrupt
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
; 0000 0312 {
; 0000 0313 lcd_gotoxy(0,1);
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
; 0000 0314 if(check_password)  // means that the number was a PC
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
; 0000 0315 {
; 0000 0316 while(curr_num != 0)
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
; 0000 0317 {
; 0000 0318 lcd_printf("*");
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
; 0000 0319 curr_num/=10;
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
; 0000 031A }
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
; 0000 031B }
; 0000 031C else               // The mumber was an ID
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
; 0000 031D {
; 0000 031E lcd_printf("%d" , curr_num);
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
; 0000 031F }
;PCODE: $000005F0 VOL: 0
; 0000 0320 
; 0000 0321 }
; 0000 0322 curr_num=-1;
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
; 0000 0323 run_interrupt = false;                    // indicates that the interrupt has ended
;PCODE: $000005F4 VOL: 0
; 0000 0324 if(check_password) enter_password=true;   // turn on the mode of writing PC (display('*') instead of numeric digits)
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
; 0000 0325 }
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;interrupt[2] void admin_INT0(void)
; 0000 032A {   bool check_password = false;
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
; 0000 032B if(enter_password)check_password=true,enter_password=false; // indicates that the user was writing a PC before the interrupt
;PCODE: $000005FF VOL: 0
;	check_password -> R17
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
; 0000 032C run_interrupt=true;        // indicates the starting of the interrupt
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
; 0000 032D admin_interaction();
;PCODE: $0000060A VOL: 0
; 0000 032E handle_interrupt(check_password);
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
; 0000 032F 
; 0000 0330 }
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
;interrupt[3] void setPC_INT1(void)
; 0000 0333 {   bool check_password = false;
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
; 0000 0334 if(enter_password)check_password=true,enter_password=false;
;PCODE: $00000613 VOL: 0
;	check_password -> R17
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
; 0000 0335 run_interrupt=true;
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
; 0000 0336 set_passcode();
;PCODE: $0000061E VOL: 0
; 0000 0337 handle_interrupt(check_password);
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
; 0000 0338 }
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
